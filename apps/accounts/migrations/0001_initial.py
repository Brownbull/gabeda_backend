# Generated by Django 5.2.7 on 2025-10-29 03:36

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff status')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='superuser status')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='company name')),
                ('industry', models.CharField(choices=[('retail', 'Retail'), ('food_beverage', 'Food & Beverage'), ('services', 'Services'), ('manufacturing', 'Manufacturing'), ('wholesale', 'Wholesale'), ('other', 'Other')], default='retail', max_length=50, verbose_name='industry')),
                ('location', models.CharField(default='Santiago, Chile', max_length=100, verbose_name='location')),
                ('column_config', models.JSONField(blank=True, default=dict, help_text='CSV column name mappings', verbose_name='column configuration')),
                ('currency', models.CharField(default='CLP', max_length=10, verbose_name='currency')),
                ('top_products_threshold', models.DecimalField(decimal_places=2, default=0.2, help_text='Percentage threshold for top products (0.20 = 20%)', max_digits=3, verbose_name='top products threshold')),
                ('dead_stock_days', models.IntegerField(default=30, help_text='Days without sales to consider product as dead stock', verbose_name='dead stock days')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companies_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
            options={
                'verbose_name': 'company',
                'verbose_name_plural': 'companies',
                'db_table': 'companies',
            },
        ),
        migrations.CreateModel(
            name='CompanyMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('business_owner', 'Business Owner'), ('analyst', 'Business Analyst'), ('operations_manager', 'Operations Manager')], max_length=50, verbose_name='role')),
                ('joined_at', models.DateTimeField(auto_now_add=True, verbose_name='joined at')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='accounts.company', verbose_name='company')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'company member',
                'verbose_name_plural': 'company members',
                'db_table': 'company_members',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_created_6541e9_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['name'], name='companies_name_c7a1b3_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['created_at'], name='companies_created_c84a3d_idx'),
        ),
        migrations.AddIndex(
            model_name='companymember',
            index=models.Index(fields=['company', 'user'], name='company_mem_company_d10aae_idx'),
        ),
        migrations.AddIndex(
            model_name='companymember',
            index=models.Index(fields=['user'], name='company_mem_user_id_85c48e_idx'),
        ),
        migrations.AddIndex(
            model_name='companymember',
            index=models.Index(fields=['role'], name='company_mem_role_b02002_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='companymember',
            unique_together={('company', 'user')},
        ),
    ]
